###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      23/Jan/2017  15:40:57 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\stm324xg_eval.c                                #
#    Command line =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\stm324xg_eval.c -D USE_STDPERIPH_DRIVER -D     #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\ -o D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_M #
#                    ONITOR_STM32_IAP\Project\Debug\Obj\ --debug              #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32 #
#                    _IAP\Project\..\Platform\INC\ -I                         #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -I     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\Common\ -I                  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\ -Oh      #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\stm324xg_eval.lst                        #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\Obj\stm324xg_eval.o                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Platform\SRC\stm324xg_eval.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm324xg_eval.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides
      8            *            - set of firmware functions to manage Leds, push-button and COM ports
      9            *            - low level initialization functions for SD card (on SDIO) and
     10            *              serial EEPROM (sEE)
     11            *          available on STM324xG-EVAL evaluation board(MB786) RevB from
     12            *          STMicroelectronics.
     13            ******************************************************************************
     14            * @attention
     15            *
     16            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     17            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     18            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     19            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     20            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     21            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     22            *
     23            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     24            ******************************************************************************
     25            */ 
     26            
     27          /* Includes ------------------------------------------------------------------*/
     28          #include "stm324xg_eval.h"
     29          #include "stm32f4xx_sdio.h"
     30          #include "stm32f4xx_dma.h"
     31          #include "stm32f4xx_i2c.h"
     32          
     33          /** @addtogroup Utilities
     34            * @{
     35            */ 
     36          
     37          /** @addtogroup STM32_EVAL
     38            * @{
     39            */ 
     40          
     41          /** @addtogroup STM324xG_EVAL
     42            * @{
     43            */   
     44              
     45          /** @defgroup STM324xG_EVAL_LOW_LEVEL 
     46            * @brief This file provides firmware functions to manage Leds, push-buttons, 
     47            *        COM ports, SD card on SDIO and serial EEPROM (sEE) available on 
     48            *        STM324xG-EVAL evaluation board from STMicroelectronics.
     49            * @{
     50            */ 
     51          
     52          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_TypesDefinitions
     53            * @{
     54            */ 
     55          /**
     56            * @}
     57            */ 
     58          
     59          
     60          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Defines
     61            * @{
     62            */ 
     63          /**
     64            * @}
     65            */ 
     66          
     67          
     68          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Macros
     69            * @{
     70            */ 
     71          /**
     72            * @}
     73            */ 
     74          
     75          
     76          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Variables
     77            * @{
     78            */ 
     79          GPIO_TypeDef* GPIO_PORT[LEDn] = {LED1_GPIO_PORT, LED2_GPIO_PORT, LED3_GPIO_PORT,
     80                                           LED4_GPIO_PORT};
     81          const uint16_t GPIO_PIN[LEDn] = {LED1_PIN, LED2_PIN, LED3_PIN,
     82                                           LED4_PIN};
     83          const uint32_t GPIO_CLK[LEDn] = {LED1_GPIO_CLK, LED2_GPIO_CLK, LED3_GPIO_CLK,
     84                                           LED4_GPIO_CLK};
     85          
     86          GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {WAKEUP_BUTTON_GPIO_PORT, TAMPER_BUTTON_GPIO_PORT,
     87                                                KEY_BUTTON_GPIO_PORT}; 
     88          
     89          const uint16_t BUTTON_PIN[BUTTONn] = {WAKEUP_BUTTON_PIN, TAMPER_BUTTON_PIN,
     90                                                KEY_BUTTON_PIN}; 
     91          
     92          const uint32_t BUTTON_CLK[BUTTONn] = {WAKEUP_BUTTON_GPIO_CLK, TAMPER_BUTTON_GPIO_CLK,
     93                                                KEY_BUTTON_GPIO_CLK};
     94          
     95          const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {WAKEUP_BUTTON_EXTI_LINE,
     96                                                      TAMPER_BUTTON_EXTI_LINE, 
     97                                                      KEY_BUTTON_EXTI_LINE};
     98          
     99          const uint16_t BUTTON_PORT_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PORT_SOURCE,
    100                                                        TAMPER_BUTTON_EXTI_PORT_SOURCE, 
    101                                                        KEY_BUTTON_EXTI_PORT_SOURCE};
    102          								 
    103          const uint16_t BUTTON_PIN_SOURCE[BUTTONn] = {WAKEUP_BUTTON_EXTI_PIN_SOURCE,
    104                                                       TAMPER_BUTTON_EXTI_PIN_SOURCE, 
    105                                                       KEY_BUTTON_EXTI_PIN_SOURCE}; 
    106          const uint16_t BUTTON_IRQn[BUTTONn] = {WAKEUP_BUTTON_EXTI_IRQn, TAMPER_BUTTON_EXTI_IRQn,
    107                                                 KEY_BUTTON_EXTI_IRQn};
    108          
    109          USART_TypeDef* COM_USART[COMn] = {EVAL_COM1}; 
    110          
    111          GPIO_TypeDef* COM_TX_PORT[COMn] = {EVAL_COM1_TX_GPIO_PORT};
    112           
    113          GPIO_TypeDef* COM_RX_PORT[COMn] = {EVAL_COM1_RX_GPIO_PORT};
    114          
    115          const uint32_t COM_USART_CLK[COMn] = {EVAL_COM1_CLK};
    116          
    117          const uint32_t COM_TX_PORT_CLK[COMn] = {EVAL_COM1_TX_GPIO_CLK};
    118           
    119          const uint32_t COM_RX_PORT_CLK[COMn] = {EVAL_COM1_RX_GPIO_CLK};
    120          
    121          const uint16_t COM_TX_PIN[COMn] = {EVAL_COM1_TX_PIN};
    122          
    123          const uint16_t COM_RX_PIN[COMn] = {EVAL_COM1_RX_PIN};
    124           
    125          const uint16_t COM_TX_PIN_SOURCE[COMn] = {EVAL_COM1_TX_SOURCE};
    126          
    127          const uint16_t COM_RX_PIN_SOURCE[COMn] = {EVAL_COM1_RX_SOURCE};
    128           
    129          const uint16_t COM_TX_AF[COMn] = {EVAL_COM1_TX_AF};
    130           
    131          const uint16_t COM_RX_AF[COMn] = {EVAL_COM1_RX_AF};
    132          
    133          DMA_InitTypeDef    sEEDMA_InitStructure; 
    134          NVIC_InitTypeDef   NVIC_InitStructure;
    135          
    136          /**
    137            * @}
    138            */ 
    139          
    140          
    141          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_FunctionPrototypes
    142            * @{
    143            */ 
    144          
    145          /**
    146            * @}
    147            */ 
    148          
    149          /** @defgroup STM324xG_EVAL_LOW_LEVEL_Private_Functions
    150            * @{
    151            */ 
    152          
    153          /**
    154            * @brief  Configures LED GPIO.
    155            * @param  Led: Specifies the Led to be configured. 
    156            *   This parameter can be one of following parameters:
    157            *     @arg LED1
    158            *     @arg LED2
    159            *     @arg LED3
    160            *     @arg LED4
    161            * @retval None
    162            */
    163          void STM_EVAL_LEDInit(Led_TypeDef Led)
    164          {
    165            GPIO_InitTypeDef  GPIO_InitStructure;
    166            
    167            /* Enable the GPIO_LED Clock */
    168            RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
    169          
    170          
    171            /* Configure the GPIO_LED pin */
    172            GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
    173            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    174            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    175            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    176            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    177            GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
    178          }
    179          
    180          /**
    181            * @brief  Turns selected LED On.
    182            * @param  Led: Specifies the Led to be set on. 
    183            *   This parameter can be one of following parameters:
    184            *     @arg LED1
    185            *     @arg LED2
    186            *     @arg LED3
    187            *     @arg LED4  
    188            * @retval None
    189            */
    190          void STM_EVAL_LEDOn(Led_TypeDef Led)
    191          {
    192            GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
    193          }
    194          
    195          /**
    196            * @brief  Turns selected LED Off.
    197            * @param  Led: Specifies the Led to be set off. 
    198            *   This parameter can be one of following parameters:
    199            *     @arg LED1
    200            *     @arg LED2
    201            *     @arg LED3
    202            *     @arg LED4 
    203            * @retval None
    204            */
    205          void STM_EVAL_LEDOff(Led_TypeDef Led)
    206          {
    207            GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
    208          }
    209          
    210          /**
    211            * @brief  Toggles the selected LED.
    212            * @param  Led: Specifies the Led to be toggled. 
    213            *   This parameter can be one of following parameters:
    214            *     @arg LED1
    215            *     @arg LED2
    216            *     @arg LED3
    217            *     @arg LED4  
    218            * @retval None
    219            */
    220          void STM_EVAL_LEDToggle(Led_TypeDef Led)
    221          {
    222            GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
    223          }
    224          
    225          /**
    226            * @brief  Configures Button GPIO and EXTI Line.
    227            * @param  Button: Specifies the Button to be configured.
    228            *   This parameter can be one of following parameters:   
    229            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    230            *     @arg BUTTON_TAMPER: Tamper Push Button  
    231            *     @arg BUTTON_KEY: Key Push Button 
    232            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    233            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    234            *     @arg BUTTON_UP: Joystick Up Push Button 
    235            *     @arg BUTTON_DOWN: Joystick Down Push Button
    236            *     @arg BUTTON_SEL: Joystick Sel Push Button
    237            * @param  Button_Mode: Specifies Button mode.
    238            *   This parameter can be one of following parameters:   
    239            *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
    240            *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
    241            *                     generation capability  
    242            * @retval None
    243            */
    244          void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    245          {
    246            GPIO_InitTypeDef GPIO_InitStructure;
    247            EXTI_InitTypeDef EXTI_InitStructure;
    248            NVIC_InitTypeDef NVIC_InitStructure;
    249          
    250          
    251            /* Enable the BUTTON Clock */
    252            RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
    253            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    254          
    255            /* Configure Button pin as input */
    256            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    257            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    258            GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
    259            GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
    260          
    261          
    262            if (Button_Mode == BUTTON_MODE_EXTI)
    263            {
    264              /* Connect Button EXTI Line to Button GPIO Pin */
    265              SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
    266          
    267              /* Configure Button EXTI line */
    268              EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    269              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    270          
    271              if(Button != BUTTON_WAKEUP)
    272              {
    273                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
    274              }
    275              else
    276              {
    277                EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    278              }
    279              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    280              EXTI_Init(&EXTI_InitStructure);
    281          
    282              /* Enable and set Button EXTI Interrupt to the lowest priority */
    283              NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    284              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    285              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    286              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    287          
    288              NVIC_Init(&NVIC_InitStructure); 
    289            }
    290          }
    291          
    292          /**
    293            * @brief  Returns the selected Button state.
    294            * @param  Button: Specifies the Button to be checked.
    295            *   This parameter can be one of following parameters:    
    296            *     @arg BUTTON_WAKEUP: Wakeup Push Button
    297            *     @arg BUTTON_TAMPER: Tamper Push Button  
    298            *     @arg BUTTON_KEY: Key Push Button 
    299            *     @arg BUTTON_RIGHT: Joystick Right Push Button 
    300            *     @arg BUTTON_LEFT: Joystick Left Push Button 
    301            *     @arg BUTTON_UP: Joystick Up Push Button 
    302            *     @arg BUTTON_DOWN: Joystick Down Push Button
    303            *     @arg BUTTON_SEL: Joystick Sel Push Button    
    304            * @retval The Button GPIO pin value.
    305            */
    306          uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
    307          {
    308            return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
    309          }
    310          
    311          
    312          /**
    313            * @brief  Configures COM port.
    314            * @param  COM: Specifies the COM port to be configured.
    315            *   This parameter can be one of following parameters:    
    316            *     @arg COM1
    317            *     @arg COM2  
    318            * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
    319            *   contains the configuration information for the specified USART peripheral.
    320            * @retval None
    321            */
    322          void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
    323          {
    324            GPIO_InitTypeDef GPIO_InitStructure;
    325          
    326            /* Enable GPIO clock */
    327            RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
    328          
    329            if (COM == COM1)
    330            {
    331              /* Enable UART clock */
    332              RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
    333            }
    334          
    335            /* Connect PXx to USARTx_Tx*/
    336            GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
    337          
    338            /* Connect PXx to USARTx_Rx*/
    339            GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
    340          
    341            /* Configure USART Tx as alternate function  */
    342            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    343            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    344            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    345          
    346            GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
    347            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    348            GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
    349          
    350            /* Configure USART Rx as alternate function  */
    351            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    352            GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
    353            GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
    354          
    355            /* USART configuration */
    356            USART_Init(COM_USART[COM], USART_InitStruct);
    357              
    358            /* Enable USART */
    359            USART_Cmd(COM_USART[COM], ENABLE);
    360          }
    361          
    362          /**
    363            * @brief  DeInitializes the SDIO interface.
    364            * @param  None
    365            * @retval None
    366            */
    367          void SD_LowLevel_DeInit(void)
    368          {
    369            GPIO_InitTypeDef  GPIO_InitStructure;
    370            
    371            /*!< Disable SDIO Clock */
    372            SDIO_ClockCmd(DISABLE);
    373            
    374            /*!< Set Power State to OFF */
    375            SDIO_SetPowerState(SDIO_PowerState_OFF);
    376          
    377            /*!< DeInitializes the SDIO peripheral */
    378            SDIO_DeInit();
    379            
    380            /* Disable the SDIO APB2 Clock */
    381            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
    382          
    383            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
    384            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
    385            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
    386            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
    387            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
    388            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
    389          
    390            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    391            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    392            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    393            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    394            GPIO_Init(GPIOC, &GPIO_InitStructure);
    395          
    396            /* Configure PD.02 CMD line */
    397            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    398            GPIO_Init(GPIOD, &GPIO_InitStructure);
    399          
    400            /* Configure PC.12 pin: CLK pin */
    401            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    402            GPIO_Init(GPIOC, &GPIO_InitStructure);
    403          }
    404          
    405          /**
    406            * @brief  Initializes the SD Card and put it into StandBy State (Ready for 
    407            *         data transfer).
    408            * @param  None
    409            * @retval None
    410            */
    411          void SD_LowLevel_Init(void)
    412          {
    413            GPIO_InitTypeDef  GPIO_InitStructure;
    414          
    415            /* GPIOC and GPIOD Periph clock enable */
    416            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
    417          
    418            GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
    419            GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
    420            GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
    421            GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
    422            GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
    423            GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
    424          
    425            /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
    426            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
    427            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
    428            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    429            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    430            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    431            GPIO_Init(GPIOC, &GPIO_InitStructure);
    432          
    433            /* Configure PD.02 CMD line */
    434            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    435            GPIO_Init(GPIOD, &GPIO_InitStructure);
    436          
    437            /* Configure PC.12 pin: CLK pin */
    438            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    439            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    440            GPIO_Init(GPIOC, &GPIO_InitStructure);
    441            
    442            /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
    443            GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
    444            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    445            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    446            GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
    447          
    448            /* Enable the SDIO APB2 Clock */
    449            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
    450          
    451            /* Enable the DMA2 Clock */
    452            RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
    453          }
    454          
    455          /**
    456            * @brief  Configures the DMA2 Channel4 for SDIO Tx request.
    457            * @param  BufferSRC: pointer to the source buffer
    458            * @param  BufferSize: buffer size
    459            * @retval None
    460            */
    461          void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
    462          {
    463            DMA_InitTypeDef SDDMA_InitStructure;
    464          
    465            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
    466          
    467            /* DMA2 Stream3  or Stream6 disable */
    468            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
    469          
    470            /* DMA2 Stream3  or Stream6 Config */
    471            DMA_DeInit(SD_SDIO_DMA_STREAM);
    472          
    473            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
    474            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
    475            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
    476            SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    477            SDDMA_InitStructure.DMA_BufferSize = 0;
    478            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    479            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    480            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    481            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
    482            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    483            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    484            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    485            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    486            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
    487            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
    488            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
    489            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
    490            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
    491          
    492            /* DMA2 Stream3  or Stream6 enable */
    493            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
    494              
    495          }
    496          
    497          /**
    498            * @brief  Configures the DMA2 Channel4 for SDIO Rx request.
    499            * @param  BufferDST: pointer to the destination buffer
    500            * @param  BufferSize: buffer size
    501            * @retval None
    502            */
    503          void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
    504          {
    505            DMA_InitTypeDef SDDMA_InitStructure;
    506          
    507            DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
    508          
    509            /* DMA2 Stream3  or Stream6 disable */
    510            DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
    511          
    512            /* DMA2 Stream3 or Stream6 Config */
    513            DMA_DeInit(SD_SDIO_DMA_STREAM);
    514          
    515            SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
    516            SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
    517            SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
    518            SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    519            SDDMA_InitStructure.DMA_BufferSize = 0;
    520            SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    521            SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    522            SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    523            SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
    524            SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    525            SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    526            SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    527            SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    528            SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
    529            SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
    530            DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
    531            DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
    532            DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
    533          
    534            /* DMA2 Stream3 or Stream6 enable */
    535            DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
    536          }
    537          
    538          /**
    539            * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
    540            * @param  None
    541            * @retval None
    542            */
    543          void sEE_LowLevel_DeInit(void)
    544          {
    545            GPIO_InitTypeDef  GPIO_InitStructure; 
    546             
    547            /* sEE_I2C Peripheral Disable */
    548            I2C_Cmd(sEE_I2C, DISABLE);
    549           
    550            /* sEE_I2C DeInit */
    551            I2C_DeInit(sEE_I2C);
    552          
    553            /*!< sEE_I2C Periph clock disable */
    554            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
    555              
    556            /*!< GPIO configuration */  
    557            /*!< Configure sEE_I2C pins: SCL */
    558            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    559            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    560            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    561            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    562          
    563            /*!< Configure sEE_I2C pins: SDA */
    564            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    565            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    566          
    567            /* Configure and enable I2C DMA TX Stream interrupt */
    568            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    569            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    570            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    571            NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    572            NVIC_Init(&NVIC_InitStructure);
    573          
    574            /* Configure and enable I2C DMA RX Stream interrupt */
    575            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    576            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    577            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    578            NVIC_Init(&NVIC_InitStructure);   
    579            
    580            /* Disable and Deinitialize the DMA Streams */
    581            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    582            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    583            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    584            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    585          }
    586          
    587          /**
    588            * @brief  Initializes peripherals used by the I2C EEPROM driver.
    589            * @param  None
    590            * @retval None
    591            */
    592          void sEE_LowLevel_Init(void)
    593          {
    594            GPIO_InitTypeDef  GPIO_InitStructure; 
    595             
    596            /*!< sEE_I2C Periph clock enable */
    597            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
    598            
    599            /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
    600            RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
    601          
    602            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    603            
    604            /* Reset sEE_I2C IP */
    605            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
    606            
    607            /* Release reset signal of sEE_I2C IP */
    608            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    609              
    610            /*!< GPIO configuration */  
    611            /*!< Configure sEE_I2C pins: SCL */   
    612            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    613            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    614            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    615            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    616            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    617            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    618          
    619            /*!< Configure sEE_I2C pins: SDA */
    620            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    621            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    622          
    623            /* Connect PXx to I2C_SCL*/
    624            GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
    625          
    626            /* Connect PXx to I2C_SDA*/
    627            GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
    628            
    629            /* Configure and enable I2C DMA TX Channel interrupt */
    630            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    631            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    632            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    633            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    634            NVIC_Init(&NVIC_InitStructure);
    635          
    636            /* Configure and enable I2C DMA RX Channel interrupt */
    637            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    638            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    639            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    640            NVIC_Init(&NVIC_InitStructure);  
    641            
    642            /*!< I2C DMA TX and RX channels configuration */
    643            /* Enable the DMA clock */
    644            RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
    645            
    646            /* Clear any pending flag on Rx Stream  */
    647            DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
    648                                                 sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
    649            /* Disable the EE I2C Tx DMA stream */
    650            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    651            /* Configure the DMA stream for the EE I2C peripheral TX direction */
    652            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    653            sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
    654            sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
    655            sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
    656            sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
    657            sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
    658            sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    659            sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    660            sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    661            sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    662            sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    663            sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    664            sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    665            sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    666            sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    667            sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    668            DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
    669          
    670            /* Clear any pending flag on Rx Stream */
    671            DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
    672                                                 sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
    673            /* Disable the EE I2C DMA Rx stream */
    674            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    675            /* Configure the DMA stream for the EE I2C peripheral RX direction */
    676            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    677            DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
    678            
    679            /* Enable the DMA Channels Interrupts */
    680            DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
    681            DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
    682          }
    683          
    684          /**
    685            * @brief  Initializes DMA channel used by the I2C EEPROM driver.
    686            * @param  None
    687            * @retval None
    688            */
    689          void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
    690          { 
    691            /* Initialize the DMA with the new parameters */
    692            if (Direction == sEE_DIRECTION_TX)
    693            {
    694              /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    695              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    696              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
    697              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
    698              DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
    699            }
    700            else
    701            { 
    702              /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    703              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    704              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    705              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    706              DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
    707            }
    708          }
    709          
    710          /**
    711            * @}
    712            */ 
    713          
    714          
    715          /**
    716            * @}
    717            */ 
    718          
    719          /**
    720            * @}
    721            */
    722          
    723          /**
    724            * @}
    725            */    
    726          
    727          /**
    728            * @}
    729            */ 
    730              
    731          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   SD_LowLevel_DMA_RxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      72   SD_LowLevel_DMA_TxConfig
        72   -> DMA_ClearFlag
        72   -> DMA_Cmd
        72   -> DMA_DeInit
        72   -> DMA_FlowControllerConfig
        72   -> DMA_ITConfig
        72   -> DMA_Init
      24   SD_LowLevel_DeInit
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> RCC_APB2PeriphClockCmd
        24   -> SDIO_ClockCmd
        24   -> SDIO_DeInit
        24   -> SDIO_SetPowerState
      24   SD_LowLevel_Init
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB2PeriphClockCmd
      32   STM_EVAL_COMInit
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB1PeriphClockCmd
        32   -> USART_Cmd
        32   -> USART_Init
      16   STM_EVAL_LEDInit
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   STM_EVAL_LEDOff
       0   STM_EVAL_LEDOn
       0   STM_EVAL_LEDToggle
       0   STM_EVAL_PBGetState
         0   -> GPIO_ReadInputDataBit
      40   STM_EVAL_PBInit
        40   -> EXTI_Init
        40   -> GPIO_Init
        40   -> NVIC_Init
        40   -> RCC_AHB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> SYSCFG_EXTILineConfig
       0   sEE_LowLevel_DMAConfig
         0   -> DMA_Init
      24   sEE_LowLevel_DeInit
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> GPIO_Init
        24   -> I2C_Cmd
        24   -> I2C_DeInit
        24   -> NVIC_Init
        24   -> RCC_APB1PeriphClockCmd
      24   sEE_LowLevel_Init
        24   -> DMA_ClearFlag
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> DMA_ITConfig
        24   -> DMA_Init
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> NVIC_Init
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> RCC_APB1PeriphResetCmd
        24   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_10
       4  ??DataTable29_11
       4  ??DataTable29_12
       4  ??DataTable29_13
       4  ??DataTable29_14
       4  ??DataTable29_15
       4  ??DataTable29_2
       4  ??DataTable29_3
       4  ??DataTable29_4
       4  ??DataTable29_5
       4  ??DataTable29_6
       4  ??DataTable29_7
       4  ??DataTable29_8
       4  ??DataTable29_9
      88  ?Subroutine0
      12  BUTTON_CLK
       8  BUTTON_EXTI_LINE
       8  BUTTON_IRQn
       8  BUTTON_PIN
       8  BUTTON_PIN_SOURCE
      12  BUTTON_PORT
       8  BUTTON_PORT_SOURCE
       2  COM_RX_AF
       2  COM_RX_PIN
       2  COM_RX_PIN_SOURCE
       4  COM_RX_PORT_CLK
       2  COM_TX_AF
       2  COM_TX_PIN
       2  COM_TX_PIN_SOURCE
       4  COM_TX_PORT_CLK
      12  COM_USART
          COM_TX_PORT
          COM_RX_PORT
       4  COM_USART_CLK
      16  GPIO_CLK
       8  GPIO_PIN
      16  GPIO_PORT
      64  NVIC_InitStructure
          sEEDMA_InitStructure
      50  SD_LowLevel_DMA_RxConfig
      54  SD_LowLevel_DMA_TxConfig
     152  SD_LowLevel_DeInit
     196  SD_LowLevel_Init
     190  STM_EVAL_COMInit
      68  STM_EVAL_LEDInit
      20  STM_EVAL_LEDOff
      20  STM_EVAL_LEDOn
      24  STM_EVAL_LEDToggle
      20  STM_EVAL_PBGetState
     174  STM_EVAL_PBInit
      36  sEE_LowLevel_DMAConfig
     138  sEE_LowLevel_DeInit
     316  sEE_LowLevel_Init

 
    64 bytes in section .bss
    40 bytes in section .data
     4 bytes in section .rodata
 1 706 bytes in section .text
 
 1 706 bytes of CODE  memory
     4 bytes of CONST memory
   104 bytes of DATA  memory

Errors: none
Warnings: none
