###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      23/Jan/2017  15:40:55 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\TW8816_OSD.c                                   #
#    Command line =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\TW8816_OSD.c -D USE_STDPERIPH_DRIVER -D        #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\ -o D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_M #
#                    ONITOR_STM32_IAP\Project\Debug\Obj\ --debug              #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32 #
#                    _IAP\Project\..\Platform\INC\ -I                         #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -I     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\Common\ -I                  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\ -Oh      #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\TW8816_OSD.lst                           #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\Obj\TW8816_OSD.o                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Platform\SRC\TW8816_OSD.c
      1          /**
      2            ******************************************************************************
      3            * @file    TW8816_OSD.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   TW8816_OSD.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_IAP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          /* Private function prototypes -----------------------------------------------*/
     29          /* Private functions ---------------------------------------------------------*/
     30          #if 1
     31          void SetFontOSDWindow(void)
     32          {
     33          	WriteTW8816(0xff, 0x00);
     34          
     35          	WriteTW8816(0x94, 0x00);
     36          	WriteTW8816(0x9e, 0x00);
     37          	WriteTW8816(0x9f, 0x01);
     38          	WriteTW8816(0xa0, 0x00);
     39          	WriteTW8816(0xa1, 0x00);
     40          	WriteTW8816(0xa2, 0x00);
     41          	WriteTW8816(0xa3, 0x22);
     42          	WriteTW8816(0xa4, 0x0e);
     43          	WriteTW8816(0xa5, 0x32);
     44          	WriteTW8816(0xa6, 0x00);
     45          	WriteTW8816(0xa7, 0x00);
     46          	WriteTW8816(0xa8, 0x00);
     47          	WriteTW8816(0xa9, 0x50);
     48          	WriteTW8816(0xaa, 0x00);
     49          	WriteTW8816(0xab, 0x55);
     50          	WriteTW8816(0xac, 0x00);
     51          	WriteTW8816(0xad, 0x00);
     52          	WriteTW8816(0xae, 0x00);
     53          
     54          	WriteTW8816(0x94, 0x11);
     55          	WriteTW8816(0x94, 0x02);
     56          }
     57          
     58          
     59          void SetDisplayUpdate(void)
     60          {
     61            
     62          	WriteTW8816(0xff, 0x00);
     63          
     64          	WriteTW8816(0x95, 0x80);
     65          	WriteTW8816(0x96, 0xd8);
     66          	WriteTW8816(0x97, 0x55);
     67          	WriteTW8816(0x98, 0x06);
     68          
     69          	WriteTW8816(0x95, 0x80);
     70          	WriteTW8816(0x96, 0xd9);
     71          	WriteTW8816(0x97, 0x50);
     72          	WriteTW8816(0x98, 0x06);
     73          
     74          	WriteTW8816(0x95, 0x80);
     75          	WriteTW8816(0x96, 0xda);
     76          	WriteTW8816(0x97, 0x44);
     77          	WriteTW8816(0x98, 0x06);
     78          
     79          	WriteTW8816(0x95, 0x80);
     80          	WriteTW8816(0x96, 0xdb);
     81          	WriteTW8816(0x97, 0x41);
     82          	WriteTW8816(0x98, 0x06);
     83          
     84          	WriteTW8816(0x95, 0x80);
     85          	WriteTW8816(0x96, 0xdc);
     86          	WriteTW8816(0x97, 0x54);
     87          	WriteTW8816(0x98, 0x06);
     88          
     89          	WriteTW8816(0x95, 0x80);
     90          	WriteTW8816(0x96, 0xdd);
     91          	WriteTW8816(0x97, 0x45);
     92          	WriteTW8816(0x98, 0x06);
     93          
     94          	WriteTW8816(0x95, 0x80);
     95          	WriteTW8816(0x96, 0xde);
     96          	WriteTW8816(0x97, 0x2E);
     97          	WriteTW8816(0x98, 0x06);
     98          
     99          	WriteTW8816(0x95, 0x80);
    100          	WriteTW8816(0x96, 0xdf);
    101          	WriteTW8816(0x97, 0x2E);
    102          	WriteTW8816(0x98, 0x06);
    103          
    104          	WriteTW8816(0x95, 0x80);
    105          	WriteTW8816(0x96, 0xe0);
    106          	WriteTW8816(0x97, 0x2E);
    107          	WriteTW8816(0x98, 0x06);
    108          	
    109          }
    110          void SetBackgroundBlueOSD(){
    111                WriteTW8816(0xff, 0x00);
    112                WriteTW8816(0x94, 0x00);
    113                WriteTW8816(0x95, 0x80);
    114                WriteTW8816(0x9C, 0x80);
    115                WriteTW8816(0x9D, 0x00);
    116                WriteTW8816(0x9E, 0x01);
    117                WriteTW8816(0x9F, 0x71);
    118                WriteTW8816(0x94, 0x00);
    119                WriteTW8816(0x9E, 0x00);
    120          }
    121          void SetProgressLineOSD(u8 index){
    122                	WriteTW8816(0xff, 0x00);
    123                  WriteTW8816(0x95, 0x81);
    124                  WriteTW8816(0x96, index);
    125                  WriteTW8816(0x97, 0x7F);
    126                  WriteTW8816(0x98, 0x06);
    127          }
    128          void TurnOffOSD(){
    129                WriteTW8816(0x9C, 0x10);
    130          }
    131          #else
    132          
    133          
    134          void SetFontOSDWindow(void)
    135          {
    136          	I2C2_ByteWrite_8816(0xff, 0x00);
    137          
    138          	I2C2_ByteWrite_8816(0x94, 0x00);
    139          	I2C2_ByteWrite_8816(0x9e, 0x00);
    140          	I2C2_ByteWrite_8816(0x9f, 0x01);
    141          	I2C2_ByteWrite_8816(0xa0, 0x00);
    142          	I2C2_ByteWrite_8816(0xa1, 0x00);
    143          	I2C2_ByteWrite_8816(0xa2, 0x00);
    144          	I2C2_ByteWrite_8816(0xa3, 0x22);
    145          	I2C2_ByteWrite_8816(0xa4, 0x0e);
    146          	I2C2_ByteWrite_8816(0xa5, 0x32);
    147          	I2C2_ByteWrite_8816(0xa6, 0x00);
    148          	I2C2_ByteWrite_8816(0xa7, 0x00);
    149          	I2C2_ByteWrite_8816(0xa8, 0x00);
    150          	I2C2_ByteWrite_8816(0xa9, 0x50);
    151          	I2C2_ByteWrite_8816(0xaa, 0x00);
    152          	I2C2_ByteWrite_8816(0xab, 0x55);
    153          	I2C2_ByteWrite_8816(0xac, 0x0f);
    154          	I2C2_ByteWrite_8816(0xad, 0x00);
    155          	I2C2_ByteWrite_8816(0xae, 0x00);
    156          
    157          	I2C2_ByteWrite_8816(0x94, 0x11);
    158          	I2C2_ByteWrite_8816(0x94, 0x02);
    159          }
    160          
    161          void SetDisplayUpdate(void)
    162          {
    163          	I2C2_ByteWrite_8816(0xff, 0x00);
    164          
    165          	I2C2_ByteWrite_8816(0x95, 0x80);
    166          	I2C2_ByteWrite_8816(0x96, 0xd8);
    167          	I2C2_ByteWrite_8816(0x97, 0x55);
    168          	I2C2_ByteWrite_8816(0x98, 0x06);
    169          
    170          	I2C2_ByteWrite_8816(0x95, 0x80);
    171          	I2C2_ByteWrite_8816(0x96, 0xd9);
    172          	I2C2_ByteWrite_8816(0x97, 0x50);
    173          	I2C2_ByteWrite_8816(0x98, 0x06);
    174          
    175          	I2C2_ByteWrite_8816(0x95, 0x80);
    176          	I2C2_ByteWrite_8816(0x96, 0xda);
    177          	I2C2_ByteWrite_8816(0x97, 0x44);
    178          	I2C2_ByteWrite_8816(0x98, 0x06);
    179          
    180          	I2C2_ByteWrite_8816(0x95, 0x80);
    181          	I2C2_ByteWrite_8816(0x96, 0xdb);
    182          	I2C2_ByteWrite_8816(0x97, 0x41);
    183          	I2C2_ByteWrite_8816(0x98, 0x06);
    184          
    185          	I2C2_ByteWrite_8816(0x95, 0x80);
    186          	I2C2_ByteWrite_8816(0x96, 0xdc);
    187          	I2C2_ByteWrite_8816(0x97, 0x54);
    188          	I2C2_ByteWrite_8816(0x98, 0x06);
    189          
    190          	I2C2_ByteWrite_8816(0x95, 0x80);
    191          	I2C2_ByteWrite_8816(0x96, 0xdd);
    192          	I2C2_ByteWrite_8816(0x97, 0x45);
    193          	I2C2_ByteWrite_8816(0x98, 0x06);
    194          
    195          	I2C2_ByteWrite_8816(0x95, 0x80);
    196          	I2C2_ByteWrite_8816(0x96, 0xde);
    197          	I2C2_ByteWrite_8816(0x97, 0x2e);
    198          	I2C2_ByteWrite_8816(0x98, 0x06);
    199          
    200          	I2C2_ByteWrite_8816(0x95, 0x80);
    201          	I2C2_ByteWrite_8816(0x96, 0xdf);
    202          	I2C2_ByteWrite_8816(0x97, 0x2e);
    203          	I2C2_ByteWrite_8816(0x98, 0x06);
    204          
    205          	I2C2_ByteWrite_8816(0x95, 0x80);
    206          	I2C2_ByteWrite_8816(0x96, 0xe0);
    207          	I2C2_ByteWrite_8816(0x97, 0x2e);
    208          	I2C2_ByteWrite_8816(0x98, 0x06);
    209          	
    210          }
    211          
    212          #endif
    213          
    214          
    215          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetBackgroundBlueOSD
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayUpdate
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetFontOSDWindow
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetProgressLineOSD
         0   -> WriteTW8816
         8   -> WriteTW8816
       0   TurnOffOSD
         0   -> WriteTW8816


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
      78  SetBackgroundBlueOSD
     296  SetDisplayUpdate
     174  SetFontOSDWindow
      40  SetProgressLineOSD
       8  TurnOffOSD

 
 604 bytes in section .text
 
 604 bytes of CODE memory

Errors: none
Warnings: none
