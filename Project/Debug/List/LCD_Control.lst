###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      23/Jan/2017  15:40:54 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\LCD_Control.c                                  #
#    Command line =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\LCD_Control.c -D USE_STDPERIPH_DRIVER -D       #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\ -o D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_M #
#                    ONITOR_STM32_IAP\Project\Debug\Obj\ --debug              #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32 #
#                    _IAP\Project\..\Platform\INC\ -I                         #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -I     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\Common\ -I                  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\ -Oh      #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\LCD_Control.lst                          #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\Obj\LCD_Control.o                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Platform\SRC\LCD_Control.c
      1          /**
      2            ******************************************************************************
      3            * @file    LCD_Control.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   LCD_Control.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_IAP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          
     29          /*
     30          	ChannelPulse = (uint16_t) (((uint32_t) 0 * (TimerPeriod - 1)) / 10);  	//    0% : 0
     31          	ChannelPulse = (uint16_t) (((uint32_t) 2 * (TimerPeriod - 1)) / 10);	//	 20% : 3327  
     32          	ChannelPulse = (uint16_t) (((uint32_t) 3 * (TimerPeriod - 1)) / 10); 	//	 30% : 4991 
     33          	ChannelPulse = (uint16_t) (((uint32_t) 4 * (TimerPeriod - 1)) / 10); 	//	 40% : 6655 
     34          	ChannelPulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 10);  	//	 50% : 8319
     35          	ChannelPulse = (uint16_t) (((uint32_t) 6 * (TimerPeriod - 1)) / 10);  	//	 60% : 9982
     36          	ChannelPulse = (uint16_t) (((uint32_t) 7 * (TimerPeriod - 1)) / 10);  	//	 70% : 11646
     37          	ChannelPulse = (uint16_t) (((uint32_t) 85 * (TimerPeriod - 1)) / 100);	//	 85% : 14142  
     38          	ChannelPulse = (uint16_t) (((uint32_t) 10 * (TimerPeriod - 1)) / 10);  //	100% : 16638
     39          */
     40          //	이 값을 설정할 때, 회로적으로 Inverting 된다.
     41          //	100% -> 0%로 동작한다.
     42          const uint16_t LCDBL_PWMLEVEL[MaxBackLightLEVEL] =  
     43          {	
     44          	16638, 	//  0 Step :   0%
     45              14142, 	//  1 Step :  20%
     46              11646, 	//  2 Step :  30%
     47              9982, 	//  3 Step :  40%
     48              8319, 	//  4 Step :  50%
     49              6655, 	//  5 Step :  60%
     50              4991, 	//  6 Step :  70%
     51              3327, 	//  7 Step :  85%
     52          	0, 		//  8 Step : 100%
     53          }; 
     54          
     55          //  ++, kutelf, 131007
     56          unsigned char Camera_Mode = 0xFF;
     57          unsigned char Camera_CheckFlag = 1;
     58          unsigned char Camera_CheckCnt = 0;
     59          //  --, kutelf, 131007
     60          
     61          /* Private function prototypes -----------------------------------------------*/
     62          /* Private functions ---------------------------------------------------------*/
     63          
     64          void LED_POWER_ONOFF(uint8_t BitData)
     65          {
     66              GPIO_WriteBit(LED_PORT, LED_CTRL, (BitAction) BitData);
     67          }
     68          
     69          void LCD_POWER_ONOFF(uint8_t BitData)
     70          {
     71              GPIO_WriteBit(LCDPWR_PORT, LCDPWR_CTRL, (BitAction) BitData);
     72          }
     73          
     74          void LCDBL_ONOFF(uint8_t BitData)
     75          {
     76              GPIO_WriteBit(LCDBL_PORT, LCDBL_CTRL, (BitAction) BitData);
     77          
     78          	WL9FM_LCDBL.OnOff = BitData;
     79          }
     80          
     81          /**
     82            * @brief  PWM Level Setting (LEVEL value를 받아서 설정한다.)
     83            * @param  pwm
     84            * @retval None
     85            */
     86          void LCDBL_PWM_LEVEL(uint8_t LEVEL)
     87          {
     88              //  PWM을 변경한 후에 항상 저장해 놓는다.
     89              WL9FM_LCDBL.PWM	  = LCDBL_PWMLEVEL[LEVEL];  
     90              WL9FM_LCDBL.LEVEL = LEVEL;
     91              LCDBL_PWM_CONTROL(WL9FM_LCDBL.PWM);
     92          }
     93          
     94          /**
     95            * @brief  PWM Value Setting (pwm value를 받아서, Pulse로 설정한다.)
     96            * @param  pwm
     97            * @retval None
     98            */
     99          void LCDBL_PWM_CONTROL(uint16_t PWM_VALUE)
    100          {
    101          	TIM_OCInitTypeDef  TIM_OCInitStructure;
    102          
    103          	TIM_OCInitStructure.TIM_OCMode 			= TIM_OCMode_PWM2;
    104          	TIM_OCInitStructure.TIM_OutputState 	= TIM_OutputState_Enable;
    105          	TIM_OCInitStructure.TIM_OutputNState 	= TIM_OutputNState_Enable;
    106          	TIM_OCInitStructure.TIM_OCPolarity 		= TIM_OCPolarity_Low;
    107          	TIM_OCInitStructure.TIM_OCNPolarity 	= TIM_OCNPolarity_High;
    108          	TIM_OCInitStructure.TIM_OCIdleState 	= TIM_OCIdleState_Set;
    109          	TIM_OCInitStructure.TIM_OCNIdleState 	= TIM_OCIdleState_Reset;
    110          
    111          	//	Channel 1 Configuration in PWM mode
    112          	TIM_OCInitStructure.TIM_Pulse = PWM_VALUE;
    113          	TIM_OC1Init(TIM8, &TIM_OCInitStructure);					
    114          
    115          	// 	TIM8 counter enable
    116          	TIM_Cmd(TIM8, ENABLE);			
    117          
    118          	//	TIM8 Main Output Enable
    119          	TIM_CtrlPWMOutputs(TIM8, ENABLE);
    120          }
    121          
    122          void LCDBL_Init(void)
    123          {
    124          	//DebugMsg_printf("++ LCD_Control_Init, LCDBL(TIM8 : PWM), ONOFF Initialize START\r\n");
    125          
    126          	/* TIM8 Configuration ---------------------------------------------------
    127          	Generate 7 PWM signals with 4 different duty cycles:
    128          	TIM8 input clock (TIM8CLK) is set to 2 * APB2 clock (PCLK2), since APB2 
    129          	prescaler is different from 1.   
    130          	TIM8CLK = 2 * PCLK2  
    131          	PCLK2 = HCLK / 2 
    132          	=> TIM8CLK = 2 * (HCLK / 2) = HCLK = SystemCoreClock
    133          	TIM8CLK = SystemCoreClock, Prescaler = 0, TIM8 counter clock = SystemCoreClock
    134          	SystemCoreClock is set to 168 MHz for STM32F4xx devices
    135          
    136          	The objective is to generate 7 PWM signal at 17.57 KHz:
    137          	- TIM8_Period = (SystemCoreClock / 17570) - 1
    138          	The channel 1 and channel 1N duty cycle is set to 50%
    139          	The channel 2 and channel 2N duty cycle is set to 37.5%
    140          	The channel 3 and channel 3N duty cycle is set to 25%
    141          	The channel 4 duty cycle is set to 12.5%
    142          	The Timer pulse is calculated as follows:
    143          	- ChannelxPulse = DutyCycle * (TIM8_Period - 1) / 100
    144             
    145             Note: 
    146              SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
    147              Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
    148              function to update SystemCoreClock variable value. Otherwise, any configuration
    149              based on this variable will be incorrect. 
    150            ----------------------------------------------------------------------- */
    151            
    152            	TIM_TimeBaseInitTypeDef  	TIM_TimeBaseStructure;
    153            	TIM_OCInitTypeDef  			TIM_OCInitStructure;
    154          
    155          	uint16_t TimerPeriod  = 0;
    156          	
    157          	//	PWM Frequency : 500Hz (Mitsubishi 7" LCD)
    158          	TimerPeriod = (SystemCoreClock / 250 ) - 1;
    159          #if 0
    160          	ChannelPulse = (uint16_t) (((uint32_t) 0 * (TimerPeriod - 1)) / 10);  	//    0% : 0
    161          	ChannelPulse = (uint16_t) (((uint32_t) 2 * (TimerPeriod - 1)) / 10);	//	 20% : 3327  
    162          	ChannelPulse = (uint16_t) (((uint32_t) 3 * (TimerPeriod - 1)) / 10); 	//	 30% : 4991 
    163          	ChannelPulse = (uint16_t) (((uint32_t) 4 * (TimerPeriod - 1)) / 10); 	//	 40% : 6655 
    164          	ChannelPulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 10);  	//	 50% : 8319
    165          	ChannelPulse = (uint16_t) (((uint32_t) 6 * (TimerPeriod - 1)) / 10);  	//	 60% : 9982
    166          	ChannelPulse = (uint16_t) (((uint32_t) 7 * (TimerPeriod - 1)) / 10);  	//	 70% : 11646
    167          	ChannelPulse = (uint16_t) (((uint32_t) 85 * (TimerPeriod - 1)) / 100);	//	 85% : 14142  
    168          	ChannelPulse = (uint16_t) (((uint32_t) 10 * (TimerPeriod - 1)) / 10);  //	100% : 16638
    169          #endif
    170          
    171              //  LCDBL GPIO는 System_Init.c 에서 설정
    172          #if 0
    173          	GPIO_InitTypeDef GPIO_InitStructure;
    174          
    175          	//	LCDBL_PWM -> PWM
    176          	GPIO_InitStructure.GPIO_Pin   = LCDBL_PWM;
    177          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    178          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    179          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    180          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    181          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    182          	GPIO_PinAFConfig(LCDBL_PORT, LCDBL_PWM_PinSource, GPIO_AF_TIM8);
    183          
    184          	//  LCDBL_CTRL -> GPIO Output
    185          	GPIO_InitStructure.GPIO_Pin   = LCDBL_CTRL;
    186          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    187          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    188          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    189          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    190          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    191          
    192          #endif
    193          	
    194          	TIM_TimeBaseStructure.TIM_Prescaler         = 16;
    195          	TIM_TimeBaseStructure.TIM_CounterMode 	    = TIM_CounterMode_Up;
    196          	TIM_TimeBaseStructure.TIM_Period 			= TimerPeriod;
    197          	TIM_TimeBaseStructure.TIM_ClockDivision     = 0;
    198          	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    199          
    200          	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
    201          
    202          	TIM_OCInitStructure.TIM_OCMode 			= TIM_OCMode_PWM2;
    203          	TIM_OCInitStructure.TIM_OutputState 	= TIM_OutputState_Enable;
    204          	TIM_OCInitStructure.TIM_OutputNState 	= TIM_OutputNState_Enable;
    205          	TIM_OCInitStructure.TIM_OCPolarity 		= TIM_OCPolarity_Low;
    206          	TIM_OCInitStructure.TIM_OCNPolarity 	= TIM_OCNPolarity_High;
    207          	TIM_OCInitStructure.TIM_OCIdleState 	= TIM_OCIdleState_Set;
    208          	TIM_OCInitStructure.TIM_OCNIdleState 	= TIM_OCIdleState_Reset;
    209          
    210          	//	Channel 1 Configuration in PWM mode
    211          	TIM_OCInitStructure.TIM_Pulse = LCDBL_PWMLEVEL[DefaultLCDBLLEVEL];
    212          
    213          	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
    214          
    215          	// 	TIM8 counter enable
    216          	TIM_Cmd(TIM8, ENABLE);
    217          
    218          	// 	TIM8 Main Output Enable
    219          	TIM_CtrlPWMOutputs(TIM8, ENABLE);		
    220          
    221          	//DebugMsg_printf("-- LCD_Control_Init, LCDBL(TIM8 : PWM), ONOFF Initialize END\r\n");
    222          
    223          	TimeDelay_msec(1000); 
    224          
    225          	WL9FM_LCDBL.LEVEL = DefaultLCDBLLEVEL;
    226          	WL9FM_LCDBL.PWM   = LCDBL_PWMLEVEL[DefaultLCDBLLEVEL];
    227          }
    228          
    229          void LCD_Display_Change(uint8_t BitData)
    230          {
    231          	//	Display Buffer를 변경하는 것이기 때문에
    232          	//	표시하고자 하는 것을 하기 전에, 다른 것을 먼저 High-Z 상태로 만든다. 
    233          	if (BitData == STM32F4_DISPLAY)
    234          	{
    235          	    GPIO_WriteBit(LCD_EXYNOS_PORT, LCD_EXYNOS, Bit_RESET);
    236                      TimeDelay_msec(10); 
    237          	    GPIO_WriteBit(LCD_STM32_PORT , LCD_STM32 , Bit_SET);
    238          	}
    239          	else
    240          	{
    241          	    GPIO_WriteBit(LCD_STM32_PORT , LCD_STM32 , Bit_RESET);
    242                      TimeDelay_msec(10); 
    243                      GPIO_WriteBit(LCD_EXYNOS_PORT, LCD_EXYNOS, Bit_SET);
    244          	}
    245          }
    246          //  ++, kutelf, 131007
    247          //	카메라 동작 모드 일 경우, 3초 마다 한번씩 각 채널의
    248          //	상태를 체크하여, Video가 없으면 No Video 띄워준다.
    249          void cam_mode_check(void)
    250          {
    251          	TW8816_CheckCamera_Input(0x00);
    252          }
    253          	
    254          void cam_mode_change(u8 Mode)
    255          {
    256          	if(Mode == 0xFF)
    257          	{
    258          		LCD_Display_Change(EXYNOS_DISPLAY);
    259          	}
    260          	else
    261          	{
    262          		TW8816_CameraMode(0x00, 1);
    263          		LCD_Display_Change(STM32F4_DISPLAY);
    264          	}
    265          	
    266          	
    267          }
    268          //  --, kutelf, 131007
    269          /**\
    270            * @brief  None
    271            * @param  None
    272            * @retval None
    273            */
    274          void LCD_Control_Init(void)
    275          {
    276          	TimeDelay_msec(3000); 
    277          	
    278          	LCDBL_Init();	
    279          
    280          			//	LCDBL PWM 설정 
    281          	
    282          	//LCD_Display_Change(STM32F4_DISPLAY);
    283          }
    284          
    285          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   LCDBL_Init
        48   -> TIM_Cmd
        48   -> TIM_CtrlPWMOutputs
        48   -> TIM_OC1Init
        48   -> TIM_TimeBaseInit
        48   -> TimeDelay_msec
       8   LCDBL_ONOFF
         8   -> GPIO_WriteBit
      32   LCDBL_PWM_CONTROL
        32   -> TIM_Cmd
        32   -> TIM_CtrlPWMOutputs
        32   -> TIM_OC1Init
      32   LCDBL_PWM_LEVEL
        32   -> TIM_Cmd
        32   -> TIM_CtrlPWMOutputs
        32   -> TIM_OC1Init
       8   LCD_Control_Init
         0   -> LCDBL_Init
         8   -> TimeDelay_msec
      16   LCD_Display_Change
         0   -> GPIO_WriteBit
        16   -> GPIO_WriteBit
        16   -> TimeDelay_msec
       0   LCD_POWER_ONOFF
         0   -> GPIO_WriteBit
       0   LED_POWER_ONOFF
         0   -> GPIO_WriteBit
       8   cam_mode_change
         0   -> LCD_Display_Change
         8   -> TW8816_CameraMode
       0   cam_mode_check
         0   -> TW8816_CheckCamera_Input


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
      24  ?Subroutine0
       1  Camera_CheckCnt
       1  Camera_CheckFlag
       1  Camera_Mode
     146  LCDBL_Init
      20  LCDBL_ONOFF
      20  LCDBL_PWMLEVEL
      56  LCDBL_PWM_CONTROL
      72  LCDBL_PWM_LEVEL
      16  LCD_Control_Init
      72  LCD_Display_Change
      10  LCD_POWER_ONOFF
      12  LED_POWER_ONOFF
      26  cam_mode_change
       6  cam_mode_check

 
   1 byte  in section .bss
   2 bytes in section .data
 504 bytes in section .text
 
 504 bytes of CODE memory
   3 bytes of DATA memory

Errors: none
Warnings: none
