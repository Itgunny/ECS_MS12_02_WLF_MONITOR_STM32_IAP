###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      23/Jan/2017  15:40:55 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\common.c                                       #
#    Command line =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pla #
#                    tform\SRC\common.c -D USE_STDPERIPH_DRIVER -D STM32F4XX  #
#                    -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN             #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\ -o D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_M #
#                    ONITOR_STM32_IAP\Project\Debug\Obj\ --debug              #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32 #
#                    _IAP\Project\..\Platform\INC\ -I                         #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -I     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\Common\ -I                  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\ -Oh      #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\common.lst                               #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\Obj\common.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Platform\SRC\common.c
      1          /**
      2            ******************************************************************************
      3            * @file    STM32F4xx_IAP/src/common.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    10-October-2011
      7            * @brief   This file provides all the common functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /** @addtogroup STM32F4xx_IAP
     23            * @{
     24            */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "common.h"
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          /* Private function prototypes -----------------------------------------------*/
     34          /* Private functions ---------------------------------------------------------*/
     35          
     36          /**
     37            * @brief  Convert an Integer to a string
     38            * @param  str: The string
     39            * @param  intnum: The integer to be converted
     40            * @retval None
     41            */
     42          void Int2Str(uint8_t* str, int32_t intnum)
     43          {
     44            uint32_t i, Div = 1000000000, j = 0, Status = 0;
     45          
     46            for (i = 0; i < 10; i++)
     47            {
     48              str[j++] = (intnum / Div) + 48;
     49          
     50              intnum = intnum % Div;
     51              Div /= 10;
     52              if ((str[j-1] == '0') & (Status == 0))
     53              {
     54                j = 0;
     55              }
     56              else
     57              {
     58                Status++;
     59              }
     60            }
     61          }
     62          
     63          /**
     64            * @brief  Convert a string to an integer
     65            * @param  inputstr: The string to be converted
     66            * @param  intnum: The integer value
     67            * @retval 1: Correct
     68            *         0: Error
     69            */
     70          uint32_t Str2Int(uint8_t *inputstr, int32_t *intnum)
     71          {
     72            uint32_t i = 0, res = 0;
     73            uint32_t val = 0;
     74          
     75            if (inputstr[0] == '0' && (inputstr[1] == 'x' || inputstr[1] == 'X'))
     76            {
     77              if (inputstr[2] == '\0')
     78              {
     79                return 0;
     80              }
     81              for (i = 2; i < 11; i++)
     82              {
     83                if (inputstr[i] == '\0')
     84                {
     85                  *intnum = val;
     86                  /* return 1; */
     87                  res = 1;
     88                  break;
     89                }
     90                if (ISVALIDHEX(inputstr[i]))
     91                {
     92                  val = (val << 4) + CONVERTHEX(inputstr[i]);
     93                }
     94                else
     95                {
     96                  /* Return 0, Invalid input */
     97                  res = 0;
     98                  break;
     99                }
    100              }
    101              /* Over 8 digit hex --invalid */
    102              if (i >= 11)
    103              {
    104                res = 0;
    105              }
    106            }
    107            else /* max 10-digit decimal input */
    108            {
    109              for (i = 0;i < 11;i++)
    110              {
    111                if (inputstr[i] == '\0')
    112                {
    113                  *intnum = val;
    114                  /* return 1 */
    115                  res = 1;
    116                  break;
    117                }
    118                else if ((inputstr[i] == 'k' || inputstr[i] == 'K') && (i > 0))
    119                {
    120                  val = val << 10;
    121                  *intnum = val;
    122                  res = 1;
    123                  break;
    124                }
    125                else if ((inputstr[i] == 'm' || inputstr[i] == 'M') && (i > 0))
    126                {
    127                  val = val << 20;
    128                  *intnum = val;
    129                  res = 1;
    130                  break;
    131                }
    132                else if (ISVALIDDEC(inputstr[i]))
    133                {
    134                  val = val * 10 + CONVERTDEC(inputstr[i]);
    135                }
    136                else
    137                {
    138                  /* return 0, Invalid input */
    139                  res = 0;
    140                  break;
    141                }
    142              }
    143              /* Over 10 digit decimal --invalid */
    144              if (i >= 11)
    145              {
    146                res = 0;
    147              }
    148            }
    149          
    150            return res;
    151          }
    152          
    153          /**
    154            * @brief  Get an integer from the HyperTerminal
    155            * @param  num: The integer
    156            * @retval 1: Correct
    157            *         0: Error
    158            */
    159          uint32_t GetIntegerInput(int32_t * num)
    160          {
    161            uint8_t inputstr[16];
    162          
    163            while (1)
    164            {
    165              GetInputString(inputstr);
    166              if (inputstr[0] == '\0') continue;
    167              if ((inputstr[0] == 'a' || inputstr[0] == 'A') && inputstr[1] == '\0')
    168              {
    169                SerialPutString("User Cancelled \r\n");
    170                return 0;
    171              }
    172          
    173              if (Str2Int(inputstr, num) == 0)
    174              {
    175                SerialPutString("Error, Input again: \r\n");
    176              }
    177              else
    178              {
    179                return 1;
    180              }
    181            }
    182          }
    183          
    184          /**
    185            * @brief  Test to see if a key has been pressed on the HyperTerminal
    186            * @param  key: The key pressed
    187            * @retval 1: Correct
    188            *         0: Error
    189            */
    190          uint32_t SerialKeyPressed(uint8_t *key)
    191          {
    192          
    193            if ( USART_GetFlagStatus(EVAL_COM1, USART_FLAG_RXNE) != RESET)
    194            {
    195              *key = (uint8_t)EVAL_COM1->DR;
    196              return 1;
    197            }
    198            else
    199            {
    200              return 0;
    201            }
    202          }
    203          
    204          /**
    205            * @brief  Get a key from the HyperTerminal
    206            * @param  None
    207            * @retval The Key Pressed
    208            */
    209          uint8_t GetKey(void)
    210          {
    211            uint8_t key = 0;
    212          
    213            /* Waiting for user input */
    214            while (1)
    215            {
    216              if (SerialKeyPressed((uint8_t*)&key)) break;
    217            }
    218            return key;
    219          
    220          }
    221          
    222          /**
    223            * @brief  Print a character on the HyperTerminal
    224            * @param  c: The character to be printed
    225            * @retval None
    226            */
    227          void SerialPutChar(uint8_t c)
    228          {
    229            USART_SendData(EVAL_COM1, c);
    230            while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET)
    231            {
    232            }
    233          }
    234          
    235          /**
    236            * @brief  Print a string on the HyperTerminal
    237            * @param  s: The string to be printed
    238            * @retval None
    239            */
    240          void Serial_PutString(uint8_t *s)
    241          {
    242            while (*s != '\0')
    243            {
    244              SerialPutChar(*s);
    245              s++;
    246            }
    247          }
    248          
    249          /**
    250            * @brief  Get Input string from the HyperTerminal
    251            * @param  buffP: The input string
    252            * @retval None
    253            */
    254          void GetInputString (uint8_t * buffP)
    255          {
    256            uint32_t bytes_read = 0;
    257            uint8_t c = 0;
    258            do
    259            {
    260              c = GetKey();
    261              if (c == '\r')
    262                break;
    263              if (c == '\b') /* Backspace */
    264              {
    265                if (bytes_read > 0)
    266                {
    267                  SerialPutString("\b \b");
    268                  bytes_read --;
    269                }
    270                continue;
    271              }
    272              if (bytes_read >= CMD_STRING_SIZE )
    273              {
    274                SerialPutString("Command string size overflow\r\n");
    275                bytes_read = 0;
    276                continue;
    277              }
    278              if (c >= 0x20 && c <= 0x7E)
    279              {
    280                buffP[bytes_read++] = c;
    281                SerialPutChar(c);
    282              }
    283            }
    284            while (1);
    285            SerialPutString(("\n\r"));
    286            buffP[bytes_read] = '\0';
    287          }
    288          
    289          /**
    290            * @}
    291            */
    292          
    293          /*******************(C)COPYRIGHT 2011 STMicroelectronics *****END OF FILE******/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   GetInputString
        32   -> GetKey
        32   -> Serial_PutString
        32   -> USART_GetFlagStatus
        32   -> USART_SendData
      32   GetIntegerInput
        32   -> GetInputString
        32   -> Serial_PutString
        32   -> Str2Int
       8   GetKey
         8   -> USART_GetFlagStatus
      16   Int2Str
      16   SerialKeyPressed
        16   -> USART_GetFlagStatus
       8   SerialPutChar
         8   -> USART_GetFlagStatus
         8   -> USART_SendData
      16   Serial_PutString
        16   -> USART_GetFlagStatus
        16   -> USART_SendData
      16   Str2Int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "Command string size o...">
      24  ?<Constant "Error, Input again: \r\n">
      20  ?<Constant "User Cancelled \r\n">
       4  ?<Constant "\b \b">
       4  ?<Constant "\n\r">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
     130  GetInputString
      78  GetIntegerInput
      22  GetKey
      56  Int2Str
      24  SerialKeyPressed
      26  SerialPutChar
      36  Serial_PutString
     182  Str2Int

 
   8 bytes in section .rodata
 646 bytes in section .text
 
 646 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
