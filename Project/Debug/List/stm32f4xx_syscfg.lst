###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      23/Jan/2017  15:41:05 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Lib #
#                    raries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c #
#    Command line =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Lib #
#                    raries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c #
#                     -D USE_STDPERIPH_DRIVER -D STM32F4XX -D                 #
#                    USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN                #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\ -o D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_M #
#                    ONITOR_STM32_IAP\Project\Debug\Obj\ --debug              #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32 #
#                    _IAP\Project\..\Platform\INC\ -I                         #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -I     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\Common\ -I                  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\ -Oh      #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\List\stm32f4xx_syscfg.lst                     #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Pro #
#                    ject\Debug\Obj\stm32f4xx_syscfg.o                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_IAP\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9            *  @verbatim
     10            *  
     11            *          ===================================================================
     12            *                                 How to use this driver
     13            *          ===================================================================
     14            *                  
     15            *          This driver provides functions for:
     16            *          
     17            *          1. Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     18            *              
     19            *          2. Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     20            *            
     21            *          3. Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     22            *
     23            *  @note  SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     24            *         using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     25            *                 
     26            *  @endverbatim
     27            *      
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f4xx_syscfg.h"
     44          #include "stm32f4xx_rcc.h"
     45          
     46          /** @addtogroup STM32F4xx_StdPeriph_Driver
     47            * @{
     48            */
     49          
     50          /** @defgroup SYSCFG 
     51            * @brief SYSCFG driver modules
     52            * @{
     53            */ 
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          /* ------------ RCC registers bit address in the alias region ----------- */
     58          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     59          /* ---  PMC Register ---*/ 
     60          /* Alias word address of MII_RMII_SEL bit */ 
     61          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     62          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     63          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     64          
     65          /* ---  CMPCR Register ---*/ 
     66          /* Alias word address of CMP_PD bit */ 
     67          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     68          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     69          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     70          
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private variables ---------------------------------------------------------*/
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          
     76          /** @defgroup SYSCFG_Private_Functions
     77            * @{
     78            */ 
     79          
     80          /**
     81            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     82            *   registers to their default reset values.
     83            * @param  None
     84            * @retval None
     85            */
     86          void SYSCFG_DeInit(void)
     87          {
     88             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     89             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
     90          }
     91          
     92          /**
     93            * @brief  Changes the mapping of the specified pin.
     94            * @param  SYSCFG_Memory: selects the memory remapping.
     95            *         This parameter can be one of the following values:
     96            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
     97            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
     98            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
     99            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    100            * @retval None
    101            */
    102          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    103          {
    104            /* Check the parameters */
    105            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
    106          
    107            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
    108          }
    109          
    110          /**
    111            * @brief  Selects the GPIO pin used as EXTI Line.
    112            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    113            *          EXTI lines where x can be (A..I).
    114            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    115            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    116            *           for EXTI_PortSourceGPIOI x can be (0..11).
    117            * @retval None
    118            */
    119          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    120          {
    121            uint32_t tmp = 0x00;
    122          
    123            /* Check the parameters */
    124            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
    125            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
    126          
    127            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
    128            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
    129            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
    130          }
    131          
    132          /**
    133            * @brief  Selects the ETHERNET media interface 
    134            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    135            *          This parameter can be one of the following values: 
    136            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    137            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    138            * @retval None 
    139            */
    140          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    141          { 
    142            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
    143            /* Configure MII_RMII selection bit */ 
    144            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
    145          }
    146          
    147          /**
    148            * @brief  Enables or disables the I/O Compensation Cell.
    149            * @note   The I/O compensation cell can be used only when the device supply
    150            *         voltage ranges from 2.4 to 3.6 V.  
    151            * @param  NewState: new state of the I/O Compensation Cell.
    152            *          This parameter can be one of the following values:
    153            *            @arg ENABLE: I/O compensation cell enabled  
    154            *            @arg DISABLE: I/O compensation cell power-down mode  
    155            * @retval None
    156            */
    157          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    158          {
    159            /* Check the parameters */
    160            assert_param(IS_FUNCTIONAL_STATE(NewState));
    161          
    162            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
    163          }
    164          
    165          /**
    166            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    167            * @param  None
    168            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    169            */
    170          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    171          {
    172            FlagStatus bitstatus = RESET;
    173              
    174            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
    175            {
    176              bitstatus = SET;
    177            }
    178            else
    179            {
    180              bitstatus = RESET;
    181            }
    182            return bitstatus;
    183          }
    184          
    185          /**
    186            * @}
    187            */
    188          
    189          /**
    190            * @}
    191            */
    192          
    193          /**
    194            * @}
    195            */
    196          
    197          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SYSCFG_CompensationCellCmd
         8   -> assert_failed
       8   SYSCFG_DeInit
         0   -> RCC_APB2PeriphResetCmd
         8   -> RCC_APB2PeriphResetCmd
       8   SYSCFG_ETH_MediaInterfaceConfig
         8   -> assert_failed
      16   SYSCFG_EXTILineConfig
        16   -> assert_failed
       0   SYSCFG_GetCompensationCellStatus
       8   SYSCFG_MemoryRemapConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     116  ?<Constant "D:\\GIT\\WLF_MONITOR\\EC...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
      26  SYSCFG_CompensationCellCmd
      26  SYSCFG_DeInit
      26  SYSCFG_ETH_MediaInterfaceConfig
     156  SYSCFG_EXTILineConfig
      12  SYSCFG_GetCompensationCellStatus
      34  SYSCFG_MemoryRemapConfig

 
 416 bytes in section .text
 
 416 bytes of CODE memory

Errors: none
Warnings: none
